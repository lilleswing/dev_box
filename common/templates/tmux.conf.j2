# vi is good
setw -g mode-keys vi

# mouse behavior
set-option -g mouse on

set-option -g default-terminal screen-256color

bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Status Bar
set-option -g status-interval 1
set-option -g status-left ''
set-option -g status-right '%l:%M%p'
set-window-option -g window-status-current-fg magenta
set-option -g status-fg default

# Status Bar solarized-dark (default)
set-option -g status-bg black
set-option -g pane-active-border-fg black

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
unbind -t vi-copy Enter


{% if ansible_os_family is equalto "Debian" %}
bind-key -t vi-copy y copy-pipe "xclip -sel clip -i"
bind-key -t vi-copy Enter copy-pipe "xclip -sel clip -i"
{% endif %}

{% if ansible_os_family is equalto "Darwin" %}
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
{% endif %}

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# Fix windowname after manual setting
set-option -g allow-rename off
